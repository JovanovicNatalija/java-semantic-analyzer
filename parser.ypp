%{
    #include <iostream>
    #include <string>
    #include <cstdlib>
    #include <vector>
    #include "type.hpp"
    #include "ast.hpp"
    #include <map>

    using namespace std;

    #define YYDEBUG 1

    void yyerror(string s) {
        cerr << s << endl;
        exit(EXIT_FAILURE);
    }

    int yylex();

    /* prazna niska oznacava pocetak novog bloka */
    vector < string > stack = vector< string >();

    map < string, vector < Type* > > tableOfVars; 
    
    map < string, Class* > tablicaKlasa;

    bool indNaredbe = true;

    Type* tip(string t) {
        if(t == "int") 
            return new IntType();
        else if(t == "double")
            return new DoubleType();
        else if(t == "char")
            return new CharType();
        
        return new StringType();  
    }

    void putVarInTable(string s, Type* t) {
        // dodajemo na stek
        vector < string >::reverse_iterator i = stack.rbegin();
        while (i != stack.rend())
        {
            if(s == *i) {
                cerr << "Variable '" << s << "' is already defined." << endl;
                exit(EXIT_FAILURE);
            }
            if(string("") == *i)
                break;
            ++i;
        } 

        stack.push_back(s);

        // dodajemo u mapu
        map < string, vector < Type* > >::iterator tmp = tableOfVars.find(s);
        if(tmp == tableOfVars.end()) { 
            vector < Type* > v = vector < Type* >();
            v.push_back(t);
            tableOfVars[s] = v;
        } else {
            tableOfVars[s].push_back(t);
        }

        // cout << "dodali smo " << s << endl;
    }

    Type* getVarFromTable(string s) {
        // ako ne nadje string onda se tu ni ne nalazi
        map < string, vector < Type* > >::iterator tmp = tableOfVars.find(s);
        if(tmp == tableOfVars.end()) {
            cerr << "Variable '" << s << "' used, but never defined." << endl;
            exit(EXIT_FAILURE);
        }

        // ako smo u nekom momentu dodavali a potom 
        vector < Type* >::reverse_iterator i = tableOfVars[s].rbegin();
        if(i != tableOfVars[s].rend()) {
            return *i;
        } else {
            cerr << "Variable '" << s << "' used, but never defined." << endl;
            exit(EXIT_FAILURE);
        }
    }

    void deleteVarFromTable(string s) {
        tableOfVars[s].pop_back();
    }

    void begin_scope() {
        // cout << " pocetak scope-a " << endl;
        stack.push_back(string(""));
    }

    void end_scope() {
        while(1) {
            string s = stack.back();
            stack.pop_back();
            if (s == string("")) break;
            deleteVarFromTable(s);
        }
        // cout << " kraj scope-a " << endl;
    }

%}

%union {
    int i;
    ExprAST* e;
    vector<ExprAST*> *e1;
    string *s;
    vector < string >* v;
    vector < Field* >* v1;
    vector < pair < Type*, string > >* v2;  
    pair < Type*, string >* p;
    vector < Method* >* v4;
    Constructor* c;
    Method* m;
    Class* c1;
    vector < Class* >* v5; 
    MainClass* c2;
}

%token new_token char_token public_token static_token void_token main_token string_token double_token Main_token
%token private_token class_token return_token
%token <s> id_token tip_token klasni_tip_token

%token <i> int_token

%type <e> E Naredba NizNaredbi 
%type <e1> NizE
%type <m> Metod

%type <v> Polja
%type <v1> Polje NizPolja
%type <v2> NizArgumenata
%type <p> Argument
%type <v4> NizMetoda
%type <c> Konstruktor
%type <c1> Klasa
%type <v5> NizKlasa
%type <c2> KlasaMain

%left '-' '+'
%left '*' '/' 
%nonassoc '.'





%% 
Program : NizKlasa KlasaMain {
    Type* mainCheck = $2->typecheck();

    bool ind = false;
    for(Class* c: *$1) {
        Type* classTypeCheck = c->typecheck();
        if(classTypeCheck == NULL)
            ind = true;
    }

    if(mainCheck && ind == false)
        cout << "There are no semantics errors." << endl;
    
    end_scope();
}
;

NizKlasa : NizKlasa Klasa {
    $$ = $1;
    $$->push_back($2);
}
| Klasa {
    $$ = new vector < Class* >();
    $$->push_back($1);
}
;

Klasa : class_token klasni_tip_token '{' NizPolja Konstruktor NizMetoda '}' {
    map<string, Class*>::iterator tmp = tablicaKlasa.find(*$2);
    if(tmp != tablicaKlasa.end()) {
        cerr << "Class " << *$2 << " is already defined." << endl;
        exit(EXIT_FAILURE); 
    }

    if(*$2 != $5->getName()) {
        cerr << "Name of constructor and name of class must be equal! " << endl;
        exit(EXIT_FAILURE);
    }
    
    $$ = new Class(*$2, *$4, $5, *$6);

    tablicaKlasa[*$2] = $$;
    delete $2;
    delete $4;
    delete $6;
}
;

KlasaMain : public_token class_token Main_token '{' public_token static_token void_token main_token '(' tip_token '[' ']' id_token ')' '{' NizNaredbi '}' '}' {
    indNaredbe = true;
    $$ = new MainClass($16);
}
;

// polja su uradjena 
NizPolja : NizPolja Polje {
    $$ = $1;
    for(Field* f: *($2)) {
        putVarInTable(f->getName(), f->getType());
        $$->push_back(f);
    }
    delete $2;
}
| Polje {
    begin_scope();
    $$ = $1;
    for(Field* f: *($1)) {
        putVarInTable(f->getName(), f->getType());  
    }
}
;

Polje : public_token tip_token Polja {
    $$ = new vector<Field*>();
    for(string s: *($3)) {
        $$->push_back(new Field(tip(*$2), s));
    }
    delete $2;
    delete $3;
} 

Polja : Polja ',' id_token ';' {
    $$ = $1;
    $$->push_back(*$3);
    delete $3;
}
| id_token ';' {
    $$ = new vector<string>();
    $$->push_back(*$1);
    delete $1;
}
;

// konstruktor je uradjen
Konstruktor :  public_token klasni_tip_token '(' NizArgumenata ')' '{' NizNaredbi '}' {
    for(auto par: *$4) {
        putVarInTable(par.second, par.first); 
    }
    indNaredbe = true;
    $$ = new Constructor(*$2, *$4, $7);
    delete $2;
    delete $4;
}
;

NizArgumenata : NizArgumenata ',' Argument {
    $$ = $1;
    $$->push_back(*$3);
    delete $1;
}
| Argument {
    $$ = new vector < pair < Type*, string > >();
    $$->push_back(*$1);
    delete $1;
}
| {
    $$ = new vector < pair < Type*, string > >();
}
;

Argument : tip_token id_token {
    $$ = new pair < Type*, string >(tip(*$1), *$2);
}
| tip_token '[' ']' id_token {
    $$ = new pair < Type*, string > (new ArrayType(0, tip(*$1)), *$4);
}
;

// niz metoda uradjen
NizMetoda : NizMetoda Metod {
    $$ = $1;
    $$->push_back($2);
}
| Metod {
    $$ = new vector<Method*>;
    $$->push_back($1);
}
;

// NizArgumenata sam stavila da moze da ide u prazno i onda ovde ne treba poseban slucaj kada u zagradama nemamo nista
// Naredba moze da ode u prazno i tu pravim EmptyAST(ne znam da li postoji bolje resenje) i onda ne treba poseban slucaj i za to

Metod : public_token tip_token id_token '(' NizArgumenata ')' '{' NizNaredbi return_token E ';' '}' {
    for(auto par: *$5) {
        putVarInTable(par.second, par.first); 
    }
    Type* methodType = tip(*$2);
    $$ = new Method(methodType, *$3, *$5, $8, $10);
    delete $3;
    delete $5;
    indNaredbe = true;
}
| public_token tip_token id_token '(' NizArgumenata ')' '{' return_token E ';' '}' {
    begin_scope();
    for(auto par: *$5) {
        putVarInTable(par.second, par.first); 
    }
    Type* methodType = tip(*$2);
    $$ = new Method(methodType, *$3, *$5, new EmptyAST(), $9);
    delete $3;
    delete $5;
}
;



NizNaredbi : NizNaredbi Naredba ';' {
    $$ = new SeqExprAST($1, $2);
}
| Naredba ';' {
    indNaredbe = false;
    $$ = $1;
}
;

Naredba : tip_token id_token '=' E  {
    if(indNaredbe) 
        begin_scope();
    Type* t = tip(*$1);
    putVarInTable(*$2, t->copy());
    $$ = new AssignExprAST(*$2, $4, t);
    delete $1;
    delete $2;
}
| tip_token '['']' id_token '=' new_token tip_token '[' int_token ']' {
    if(indNaredbe) 
        begin_scope();
    Type* typeOfVar = new ArrayType($9, tip(*$1));
    Type* typeOfExpr = new ArrayType($9, tip(*$7));

    putVarInTable(*$4, typeOfVar->copy());

    $$ = new AssignExprAST(*$4, new ConstantExprAST(typeOfExpr), typeOfVar);

    delete $1;
    delete $4;
    delete $7;
}
| tip_token id_token {
    if(indNaredbe) 
        begin_scope();
    Type* t = tip(*$1);
    putVarInTable(*$2, t->copy());
    if(t->type() == STRING) {
        $$ = new AssignExprAST(*$2, new ConstantExprAST(new StringType()), t);
    } else if(t->type() == INT) {
        $$ = new AssignExprAST(*$2, new ConstantExprAST(new IntType()), t);
    } else if(t->type() == DOUBLE) {
        $$ = new AssignExprAST(*$2, new ConstantExprAST(new DoubleType()), t);
    } else {
        $$ = new AssignExprAST(*$2, new ConstantExprAST(new CharType()), t);
    }
    delete $1;
    delete $2;
}
| id_token '=' E {
    if(indNaredbe) 
        begin_scope();
    $$ = new PredefineExprAST(*$1, $3);
    delete $1;
}
| id_token '[' E ']' '=' E {
    if(indNaredbe) 
        begin_scope();
    $$ = new PredefineArrayExprAST(*$1, $3, $6);
    delete $1;
}
| klasni_tip_token id_token '=' E {
    if(indNaredbe) 
        begin_scope();
    map<string, Class*>::iterator tmp = tablicaKlasa.find(*$1);
    if(tmp == tablicaKlasa.end()) {
        cerr << "Class " << *$1 << " is not defined." << endl;
        exit(EXIT_FAILURE); 
    }
    
    putVarInTable(*$2, new ClassType(*$1));

    $$ = new AssignExprAST(*$2, $4, new ClassType(*$1));
    delete $2;
    delete $1;
}
| klasni_tip_token id_token {
    if(indNaredbe) 
        begin_scope();
    map<string, Class*>::iterator tmp = tablicaKlasa.find(*$1);
    if(tmp == tablicaKlasa.end()) {
        cerr << "Class " << *$1 << " is not defined." << endl;
        exit(EXIT_FAILURE); 
    }
    
    putVarInTable(*$2, new ClassType(*$1));

    $$ = new AssignExprAST(*$2, new ConstantExprAST(new ClassType(*$1)), new ClassType(*$1));
    delete $2;
    delete $1;
} 
| klasni_tip_token '[' ']' id_token '=' new_token klasni_tip_token '[' int_token ']' {
    map<string, Class*>::iterator tmp = tablicaKlasa.find(*$1);
    if(tmp == tablicaKlasa.end()) {
        cerr << "Class " << *$1 << " is not defined." << endl;
        exit(EXIT_FAILURE); 
    }

    putVarInTable(*$4, new ArrayType($9, new ClassType(*$1)));
    
    $$ = new AssignExprAST(*$4, new ConstantExprAST(new ArrayType($9, new ClassType(*$1))), new ArrayType($9, new ClassType(*$1)));

    delete $1;
    delete $4;
    delete $7;
}
;

E : E '+' E {
    $$ = new AddExprAST($1, $3);
}
| E '-' E {
    $$ = new SubExprAST($1, $3);
}
| E '*' E {
    $$ = new MulExprAST($1, $3);
}
| E '/' E  {
    $$ = new DivExprAST($1, $3);
}
| '(' E ')' {
    $$ = $2;
}
| id_token {
    $$ = new VariableExprAST(*$1);
    delete $1;
}
| string_token {
    $$ = new ConstantExprAST(new StringType());
}
| double_token {
    $$ = new ConstantExprAST(new DoubleType());
}
| int_token {
    $$ = new ConstantExprAST(new IntType());
}
| char_token {
    $$ = new ConstantExprAST(new CharType());
}
| id_token '[' E ']' {
    $$ = new ElementOfArrayExprAST(*$1, $3);
    delete $1;
}
| new_token klasni_tip_token '(' ')' {
    $$ = new ConstantExprAST(new ClassType(*$2));
    delete $2;
}
| E '.' id_token {
    $$ = new FieldExprAST($1, *$3);
    delete $3;
}
| E '.' id_token '(' ')' {
    $$ = new MethodExprAST($1, *$3, new vector<ExprAST*>());
    delete $3;
}
| E '.' id_token '(' NizE ')' {
    $$ = new MethodExprAST($1, *$3, $5);
    delete $3;
}
;

NizE : NizE ',' E {
    $$ = $1;
    $$->push_back($3);
}
| E {
    $$ = new vector<ExprAST*>();
    $$->push_back($1);
}
;

%%

int main() {
    //yydebug = 1;
    
    yyparse();

    return 1;
}
  